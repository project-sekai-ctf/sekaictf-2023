{"success": true, "data": {"id": 41, "name": "Hibana", "value": 500, "initial": 500, "decay": 60, "minimum": 100, "description": "Just text chatting is boring, so we made a plugin to introduce sticker communication to *GoldSrc*. Server owners can put their `.bmp` files in `svencoop/headicons` directory, and the plugin will automatically convert it to in-game format. When the game detects a chat message that corresponds to a sticker, it will be visible above that player's head. Our test server has a `yay.bmp` file, which will show up when a player types `yay` in chat.\r\n\r\nThis plugin can also run on *Counter-Strike 1.6* and *Half-Life*, but to avoid copyright issues, we decided to use a free-to-play game. You can download the game client [here](https://store.steampowered.com/app/225840/Sven_Coop/). Please make sure that your exploit works locally with the provided setup, as remote server access may be slow for distant users. If you cannot move your character around when connecting to remote, try lowering your `fps_max` value to `100`.\r\n\r\nNote: If you are running the challenge using WSL, make sure that the files are in your WSL disk, not under mounted Windows folders. The server is using Intel CPU, so some of you who use AMD CPU would run another executable in the container, which will prevent you from solving the challenge. To overcome this, you can try replacing svends_amd binary with svends_i686 binary in the game folder. If this doesn't work, you should try build a VM or use an Intel CPU machine.\r\n\r\nAuthor: nyancat0131\r\n\r\n<p style=\"text-align:center;\">\r\n\t<img src=\"/files/7da062891143c1c34e8797e1eea794f7/screenshot.jpg\"  width=70% height=70% />\r\n</p>", "connection_info": "https://ctf.sekai.team/launcher", "category": "Pwn", "state": "visible", "max_attempts": 0, "type": "dynamic", "type_data": {"id": "dynamic", "name": "dynamic", "templates": {"create": "/plugins/dynamic_challenges/assets/create.html", "update": "/plugins/dynamic_challenges/assets/update.html", "view": "/plugins/dynamic_challenges/assets/view.html"}, "scripts": {"create": "/plugins/dynamic_challenges/assets/create.js", "update": "/plugins/dynamic_challenges/assets/update.js", "view": "/plugins/dynamic_challenges/assets/view.js"}}, "solves": 0, "solved_by_me": false, "is_first_solver": false, "attempts": 0, "files": ["/files/a670629484637c383de83652503ef418/dist.zip"], "tags": ["\u2b50\u2b50\u2b50\u2b50", "Game"], "hints": [{"id": 3, "cost": 0, "content": "1. Why is <code>engine_i686.so</code> provided seperately?\n2. The server turned off anti-cheat, so I think maybe can remove some client-side obstacles. Maybe can even call something normally not accessible from console?\n3. The file transfer code of client and server are the same.\n4. Try to understand GoldSrc filesystem a bit. Observe where the downloaded files are stored to. Also it doesn't use any pack file like <code>.vpk</code>, every file is stored directly on disk."}], "view": "<div id=\"challengeContent\" x-data=\"Challenge\" x-init=\"id = 41\">\n  <button class=\"button iconButton small\" id=\"collapseButton\" @click=\"collapse()\">\n    <iconify-icon icon=\"fa6-solid:chevron-left\"></iconify-icon>\n  </button>\n  <div class=\"currentChallengeInfoRow\">\n    <div class=\"currentChallengeScore\">\n      500\n    </div>\n    <hgroup class=\"currentChallengeInfo\">\n      <h2 class=\"currentChallengeName\">Hibana</h2>\n      <p class=\"currentChallengeCategory\" role=\"doc-subtitle\">Pwn</p>\n    </hgroup>\n  </div>\n  <div class=\"currentChallengeMeta\">\n    \n    <span class=\"chip\" aria-label=\"Tag: Game\">Game</span>\n    \n    <div\n      class=\"challengeIndicators\"\n      aria-label=\"Difficulty level 4, unsolved\"\n      title=\"Difficulty level 4, unsolved\"\n      >\n      \n      <span\n        class=\"challengeIndicator unsolved\"></span>\n      \n      <span\n        class=\"challengeIndicator unsolved\"></span>\n      \n      <span\n        class=\"challengeIndicator unsolved\"></span>\n      \n      <span\n        class=\"challengeIndicator unsolved\"></span>\n      \n    </div>\n  </div>\n  <div class=\"challenge-desc\"><p>Just text chatting is boring, so we made a plugin to introduce sticker communication to <em>GoldSrc</em>. Server owners can put their <code>.bmp</code> files in <code>svencoop/headicons</code> directory, and the plugin will automatically convert it to in-game format. When the game detects a chat message that corresponds to a sticker, it will be visible above that player's head. Our test server has a <code>yay.bmp</code> file, which will show up when a player types <code>yay</code> in chat.</p>\n<p>This plugin can also run on <em>Counter-Strike 1.6</em> and <em>Half-Life</em>, but to avoid copyright issues, we decided to use a free-to-play game. You can download the game client <a href=\"https://store.steampowered.com/app/225840/Sven_Coop/\">here</a>. Please make sure that your exploit works locally with the provided setup, as remote server access may be slow for distant users. If you cannot move your character around when connecting to remote, try lowering your <code>fps_max</code> value to <code>100</code>.</p>\n<p>Note: If you are running the challenge using WSL, make sure that the files are in your WSL disk, not under mounted Windows folders. The server is using Intel CPU, so some of you who use AMD CPU would run another executable in the container, which will prevent you from solving the challenge. To overcome this, you can try replacing svends_amd binary with svends_i686 binary in the game folder. If this doesn't work, you should try build a VM or use an Intel CPU machine.</p>\n<p>Author: nyancat0131</p>\n<p style=\"text-align:center;\">\n\t<img src=\"/files/7da062891143c1c34e8797e1eea794f7/screenshot.jpg\"  width=70% height=70% />\n</p>\n</div>\n\n  \n  <div class=\"inputFrame copyableConnection\" x-ref=\"connectionBox\">\n    \n    \n    \n    <code class=\"connectionValue\"><a href=\"https://ctf.sekai.team/launcher\" rel=\"noopener\" target=\"_blank\">https://ctf.sekai.team/launcher</a></code>\n    \n    <button class=\"inputIcon\" type=\"button\" @click=\"copyText(&#34;https://ctf.sekai.team/launcher&#34;)\">\n      <iconify-icon icon=\"material-symbols:content-copy\" inline class=\"\"></iconify-icon>\n    </button>\n    \n  </div>\n  \n\n  \n  <div class=\"buttonRow\">\n    \n    \n    <button class=\"button textButton shade small\" @click=\"showHint(3, false)\">\n      <span>View hint 1</span>\n    </button>\n    \n      \n  </div>\n  \n\n  \n  <div class=\"buttonRow\">\n    \n    <a href=\"/files/a670629484637c383de83652503ef418/dist.zip\" target=\"_blank\" class=\"button textButton shade small\">\n      <iconify-icon icon=\"material-symbols:download\" aria-label=\"Download attachment\"></iconify-icon>\n      <span>\n        \n        \n        \n        \n        dist.zip\n        \n      </span>\n    </a>\n    \n  </div>\n  \n\n  \n\n  <div class=\"filler\"></div>\n\n  \n  <div class=\"solvers\">\n    \n    <button class=\"button textButton shade small\" disabled @click=\"showSolves()\"><span>\n        <span x-show=\"solves === null\">0 solves</span>\n        <span x-show=\"solves !== null\"><span x-text=\"(solves && solves.length)\"></span> solve<span\n            x-text=\"(solves && solves.length !== 1) ? 's' : ''\"></span></span>\n      </span></button>\n    \n  </div>\n  \n\n  <div class=\"flagSubmissionRow\">\n    \n    <input id=\"challenge-id\" type=\"hidden\" value=\"41\">\n    <div class=\"inputFrame flag\">\n      <input type=\"text\" name=\"submission\" id=\"challenge-input\"\n        aria-label=\"Enter flag\"\n        @keyup.enter=\"submitChallenge()\" x-model=\"submission\" \n        placeholder=\"SEKAI{\u2026}\">\n      <iconify-icon icon=\"ic:baseline-edit\" class=\"inputIcon\" aria-hidden=\"true\"></iconify-icon>\n    </div>\n    \n    \n    <button class=\"button iconButton small\" @click.debounce.500ms=\"submitChallenge()\"\n      :disabled=\"false || submitting\" aria-label=\"Submit flag\" title=\"Submit flag\">\n      <iconify-icon icon=\"material-symbols:send\" aria-hidden=\"true\"></iconify-icon>\n    </button>\n    \n  </div>\n\n  <dialog class=\"modal fit\" id=\"solvers\" x-ref=\"solversModal\">\n    <h2 class=\"modalHeader\"><span x-text=\"solves && solves.length\"></span> solve<span\n        x-text=\"(solves && solves.length !== 1) ? 's' : ''\"></span> of Hibana</h2>\n    <div class=\"modalBody\">\n      <template x-for=\"(solve, idx) in solves\">\n        <a :href=\"solve.account_url\"\n          :class=\"{'listItem': true, 'active': solve.account_id == (window.init.userMode == 'teams' ? window.init.teamId : window.init.userId)}\">\n          <div class=\"listItemNumber\">\n            <img :src=\"window.rankIcons[idx]\" :alt=\"idx + 1\" x-show=\"idx < 3\">\n            <span x-text=\"idx + 1\" x-show=\"idx >= 3\"></span>\n          </div>\n          <div class=\"listItemDetails solversItemDetails\">\n            <div class=\"listItemDetailsPrimary\" x-text=\"solve.name\"></div>\n            <div x-text=\"solve.date\"></div>\n          </div>\n          <div class=\"listItemScore digits5\">\n            <span>\n              <span class=\"listItemScoreValue\" x-html=\"solve.timeDiff\"></span>\n            </span>\n          </div>\n        </a>\n      </template>\n    </div>\n    <div class=\"modalFooter\">\n      <button class=\"button textButton shade\" x-ref=\"solversModalClose\">\n        <span>Close</span>\n      </button>\n    </div>\n  </dialog>\n\n  \n  <dialog class=\"modal fit hintModal\" x-ref=\"hintDialog3\" data-hint-id=\"3\">\n    <h2 class=\"modalHeader\">Hint 1</h2>\n    <div class=\"modalBody text\">\n      \n      <ol>\n<li>Why is <code>engine_i686.so</code> provided seperately?</li>\n<li>The server turned off anti-cheat, so I think maybe can remove some client-side obstacles. Maybe can even call something normally not accessible from console?</li>\n<li>The file transfer code of client and server are the same.</li>\n<li>Try to understand GoldSrc filesystem a bit. Observe where the downloaded files are stored to. Also it doesn't use any pack file like <code>.vpk</code>, every file is stored directly on disk.</li>\n</ol>\n\n      \n    </div>\n    <div class=\"modalFooter\">\n      <button class=\"button textButton shade\">\n        <span>Close</span>\n      </button>\n    </div>\n  </dialog>\n  \n\n</div>"}}
