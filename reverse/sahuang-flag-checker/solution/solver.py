#!/usr/bin/python3

import numpy as np

m = [[55,81,66,68,86,67,51,34,88,43,44,70,65,51,93,54],
    [73,45,54,35,82,59,67,84,87,46,69,46,46,80,79,51],
    [39,50,57,67,51,68,61,32,79,48,35,90,63,69,66,52],
    [70,55,64,40,52,84,79,77,51,60,74,57,95,78,93,41],
    [70,77,58,78,68,83,49,37,90,53,61,91,65,65,95,58],
    [71,64,91,90,87,57,53,75,48,68,48,69,73,63,47,51],
    [63,49,74,50,52,95,32,83,65,85,66,53,85,74,42,81],
    [33,46,63,85,39,80,89,50,62,70,47,70,39,56,54,61],
    [67,36,84,70,91,58,68,87,33,77,91,88,87,46,66,67],
    [60,80,35,79,69,45,54,79,76,49,38,75,35,77,70,91],
    [91,74,63,55,63,76,83,39,61,69,61,49,92,34,75,52],
    [87,80,83,43,36,49,62,86,51,49,67,65,69,92,95,42],
    [44,66,68,88,79,45,46,70,74,94,75,50,75,77,66,66],
    [48,39,58,73,65,66,63,77,56,80,85,57,79,58,78,64],
    [37,78,75,90,78,49,76,79,68,82,76,87,82,73,52,46],
    [93,36,34,41,94,55,42,58,54,37,40,76,90,95,40,75]]

# Checking enc algo in python && Now decrypting
rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

ror = lambda val, r_bits, max_bits: \
    ((val & (2**max_bits-1)) >> r_bits%max_bits) | \
    (val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

# Calculated using dcode.fr API
minv = [[29, 46, 29, 60, 89, 88, 6, 4, 43, 90, 37, 15, 73, 4, 69, 69], [39, 56, 48, 46, 44, 17, 59, 40, 55, 22, 23, 27, 44, 65, 17, 61], [11, 76, 66, 19, 18, 5, 37, 6, 63, 70, 36, 25, 35, 47, 31, 22], [45, 29, 18, 91, 84, 86, 67, 74, 24, 83, 73, 40, 60, 48, 16, 14], [1, 47, 40, 47, 66, 6, 42, 72, 5, 29, 88, 27, 22, 79, 68, 42], [33, 43, 60, 48, 38, 47, 60, 70, 6, 32, 17, 0, 74, 92, 56, 70], [2, 61, 55, 54, 35, 68, 39, 68, 65, 19, 53, 3, 47, 3, 70, 60], [63, 62, 77, 79, 42, 80, 42, 30, 50, 23, 65, 35, 61, 60, 90, 40], [4, 13, 1, 56, 36, 76, 27, 6, 73, 60, 40, 27, 58, 80, 72, 33], [81, 15, 91, 17, 81, 79, 16, 77, 86, 57, 55, 42, 55, 2, 83, 41], [84, 38, 62, 60, 18, 52, 78, 82, 88, 41, 34, 30, 69, 22, 23, 91], [39, 54, 18, 75, 34, 60, 0, 82, 67, 6, 12, 78, 81, 56, 48, 28], [65, 79, 50, 14, 51, 93, 37, 62, 72, 63, 12, 70, 54, 86, 18, 52], [43, 21, 72, 41, 51, 46, 7, 22, 51, 23, 49, 57, 30, 55, 59, 55], [35, 75, 93, 82, 63, 64, 24, 15, 58, 24, 68, 70, 39, 25, 34, 62], [71, 68, 62, 31, 63, 46, 46, 47, 14, 81, 73, 44, 36, 59, 47, 66]]

enc = b"\x2f\x4d\x3d\x6c\x64\x44\x4c\x63\x50\x6b\x57\x52\x2a\x38\x73\x3c\x46\x23\x2f\x3d\x5c\x54\x49\x4a\x3d\x2a\x62\x5c\x29\x75\x59\x34\x2d\x47\x25\x4f\x22\x46\x45\x63\x74\x22\x47\x69\x5b\x7d\x7b\x4a\x48\x3e\x5b\x79\x43\x60\x42\x61\x66\x30\x70\x7d\x28\x3d\x2d\x74"
enc = [[[j - 33] for j in enc[i:i+16]] for i in range(0, len(enc), 16)]

dec = ""
for vec in enc:
    dec += "".join([chr((((i & 0xf0) | ror(i & 0x0f, 3, 4)) + 33)[0]) for i in map(lambda x: x % 94, np.dot(minv, np.array(vec)))])

print(dec)
